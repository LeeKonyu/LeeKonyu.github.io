I"5/<p>管理浏览器中的JavaScript代码是一个棘手的问题，因为代码在执行过程中会阻塞浏览器的其他进程，比如用户界面的绘制。每次遇到script标签，页面都必须停下来等待代码下载（如果是外链文件）并执行，然后继续处理其他部分。  <br />
尽管如此，还是有一些方法减少JavaScript对性能的影响。</p>

<h3 id="脚本位置">脚本位置</h3>
<p>大多数浏览器都使用单一进程来处理用户界面（UI）更新和JavaScript脚本执行，所以同一时刻只能进行其中一件事情。IE8，firefox，safari，chrome都允许并行下载JavaScript文件，遗憾的是，JavaScript的下载仍会阻塞其他资源的下载，所以推荐所有的script标签都尽可能放到/body标签的底部。</p>

<h3 id="组织脚本">组织脚本</h3>
<p>由于每个script标签的初始下载时候都会阻塞页面渲染，所以减少页面包含的script标签数量有助于减少这一情况，无论是外链文件还是内嵌脚本都是如此。  <br />
这里可以使用<a href="http://www.gruntjs.org/" target="_blank">Grunt</a>的内置concat工具来合并我们的脚本，通过min工具来压缩我们的脚本。<br />
那么什么是Grunt呢？Grunt 是一个基于任务的 JavaScript 项目命令行构建工具，运行于Node.js 平台。Grunt能够从模板快速创建项目，合并、压缩和校验 CSS &amp; JS 文件，运行单元测试以及启动静态服务器。</p>

<h3 id="无阻塞的脚本">无阻塞的脚本</h3>
<p>由于尽管下载一个较大的javascript文件只产生一次HTTP请求，却会锁死浏览器一大段时间，为了避免，需要逐步加载javascript文件，我们可以在页面加载完成后才加载javascript代码，也就是说window对象的load触发后再下载脚本。<br />
1.defer:<br />
Defer属性指明本元素所含脚本不会修改DOM，因此代码能够安全地延迟执行。（只有E4+和火狐3.5+支持，还有defer属性的script是在onload事件处理执行之前被调用）。<br />
2.动态脚本元素</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//无论何时启动下载，文件的下载和执行过程都不会阻塞页面其他进程</span>
<span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">script</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">file.js</span><span class="dl">"</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>

<span class="c1">//兼容IE和高级浏览器的，侦听获取脚本加载完成时的状态</span>
<span class="kd">function</span> <span class="nx">loadScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//IE</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">load</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">complete</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nx">callback</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">();</span>
    <span class="p">};</span>
  <span class="p">}</span>
  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">"</span><span class="s2">head</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>3.动态脚本元素</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">file.js</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
<span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">&lt;</span> <span class="mi">300</span> <span class="o">||</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">304</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//2XX表示有效响应，304表示从缓存读取</span>
      <span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">script</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="p">;</span>
      <span class="nx">script</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="c1">//优点：下载后可以先不执行，同样的代码支持全部主流浏览器</span>
<span class="c1">//缺点：javascript文件和所请求的页面必须在同一个域中，因此不适合CDN下载。</span>
<span class="c1">//故一般大型的web应用都不会采用XHR脚本注入技术。</span></code></pre></figure>

<p>4.推荐一种无阻塞方式</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//先添加动态加载所需的代码，然后加载初始化页面所需要的剩下的代码。</span>
<span class="c1">//因为第一部的尽量精简，甚至可能只包含loadScript()函数，</span>
<span class="c1">//它的下载执行速度都很快，所以不会对于页面造成太多影响。</span>
<span class="nx">一旦初始化代码就位</span><span class="err">，</span><span class="nx">就用它来加载剩余的javascript</span><span class="err">。</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">loader.js</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="o">&gt;</span>
  <span class="nx">loadScript</span><span class="p">(</span><span class="dl">"</span><span class="s2">the-rest.js</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Application</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span> <span class="c1">//参考动态加载脚本</span>
  <span class="p">});</span> 
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="c1">//还有一种方式直接将loadScript()函数嵌入页面，避免多一次请求</span>
<span class="c1">//初始化代码压缩到最小尺寸的一些库  YUI Compressor,</span>
<span class="c1">//YUI3的方式，LazyLoad，LABjs</span>
<span class="c1">//很建议使用grunt工具来优化你的js</span></code></pre></figure>

<p>以上这些方法可以提高一些JavaScript的加载和执行的性能，下一篇文章想总结下关于数据访问方面的性能优化。</p>

:ET